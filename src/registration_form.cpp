#include <string>
#include <iostream>

#include <fmt/core.h>
#include <tgbot/types/Message.h>

#include "bot.h"
#include "tg_utils.h"
#include "registration_form.h"
#include "bot_commands.h"

namespace hanley_bot::dialogs {

RegistrationForm::RegistrationForm() : StateMachineBase(State::START) {}

auto RegistrationForm::Start::OnEnter(Self self) -> Value {
	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "‚ùå –û—Ç–º–µ–Ω–∞", "d_exit"},
			{tg::utils::ButtonType::kCallback, "–î–∞–ª–µ–µ ‚û°Ô∏è", "d_continue"}
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, –∏–Ω—Ñ–æ –ø—Ä–æ –Ω–∞–±–æ—Ä", keyboard);

	return false;
}

auto RegistrationForm::Start::OnCallback(Self self, std::string_view data) -> Value {
	if (data == "d_continue") {
		return State::INPUT_FIRST_NAME;
	} else if (data == "d_exit") {
		self.GetBot().DeleteMessage(self.GetContext());

		return true;
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::InputFirstName::OnEnter(Self self) -> Value {
	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"},
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", keyboard);

	self.ListenForInput();

	return false;
}

auto RegistrationForm::InputFirstName::OnInput(Self self, Message input_message) -> Value {
	self.info_.name = input_message->text;

	return State::INPUT_LAST_NAME;
}

auto RegistrationForm::InputFirstName::OnCallback([[maybe_unused]] Self self, std::string_view data) -> Value {
	if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::InputLastName::OnEnter(Self self) -> Value {
	self.ListenForInput();

	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"}
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:", keyboard);

	return false;
}

auto RegistrationForm::InputLastName::OnInput(Self self, Message input_message) -> Value {
	self.info_.last_name = input_message->text;

	return State::INPUT_EMAIL;
}

auto RegistrationForm::InputLastName::OnCallback([[maybe_unused]] Self self, std::string_view data) -> Value {
	if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::InputEmail::OnEnter(Self self) -> Value {
	self.ListenForInput();

	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"},
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ FTF –∞–∫–∫–∞—É–Ω—Ç–µ:", keyboard);

	return false;
}

auto RegistrationForm::InputEmail::OnInput(Self self, Message input_message) -> Value {
	if (input_message->text == "invalid") {
		self.ListenForInput();

		tg::utils::MakeKeyboard keyboard{
			{
				{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"},
			}
		};

		self.GetBot().EditMessage(self.GetContext(), "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ FTF –∞–∫–∫–∞—É–Ω—Ç–µ: [–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç]", keyboard);

		return false;
	}

	self.info_.email = input_message->text;

	return State::INPUT_NEEDS_TRANSLATION;
}

auto RegistrationForm::InputEmail::OnCallback([[maybe_unused]] Self self, std::string_view data) -> Value {
	if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::InputNeedsTranslation::OnEnter(Self self) -> Value {
	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "–î–∞", "d_yes"}
		},
		{
			{tg::utils::ButtonType::kCallback, "–ù–µ—Ç", "d_no"}
		},
		{
			{tg::utils::ButtonType::kCallback, "–•–æ—á—É –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º", "d_can_translate"}
		},
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"}
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥?", keyboard);

	return false;
}

auto RegistrationForm::InputNeedsTranslation::OnCallback(Self self, std::string_view data) -> Value {
	if (data == "d_yes") {
		self.info_.needs_translation = NeedsTranslationChoices::YES;
	} else if (data == "d_no") {
		self.info_.needs_translation = NeedsTranslationChoices::NO;
	} else if (data == "d_can_translate") {
		self.info_.needs_translation = NeedsTranslationChoices::CAN_TRANSLATE;

		return State::INPUT_ENGLISH_LEVEL;
	} else if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}

	return State::CONFIRM;
}

auto RegistrationForm::InputEnglishLevel::OnEnter(Self self) -> Value {
	self.ListenForInput();

	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"}
		}
	};

	self.GetBot().EditMessage(self.GetContext(), "–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:", keyboard);

	return false;
}

auto RegistrationForm::InputEnglishLevel::OnInput(Self self, Message input_message) -> Value {
	self.info_.english_level = input_message->text;

	return State::CONFIRM;
}

auto RegistrationForm::InputEnglishLevel::OnCallback([[maybe_unused]] Self self, std::string_view data) -> Value {
	if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::Confirm::OnEnter(Self self) -> Value {
	tg::utils::MakeKeyboard keyboard{
		{
			{tg::utils::ButtonType::kCallback, "üëç –í—Å—ë –≤–µ—Ä–Ω–æ", "d_confirm"}
		},
		{
			{tg::utils::ButtonType::kCallback, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "d_back"}
		}
	};

	const auto& info = self.info_;
	const auto& name = info.name;
	const auto& last_name = info.last_name;
	const auto& email = info.email;
	const auto& needs_translation = info.needs_translation;
	const auto& english_level = info.english_level;

	std::string_view needs_translation_serialized;
	std::string english_level_serialized;

	switch (needs_translation) {
		case NeedsTranslationChoices::YES:
		{
			needs_translation_serialized = "–î–∞";

			break;
		}
		case NeedsTranslationChoices::NO:
		{
			needs_translation_serialized = "–ù–µ—Ç";

			break;
		}
		case NeedsTranslationChoices::CAN_TRANSLATE:
		{
			needs_translation_serialized = "–ù–µ—Ç, –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º";
			english_level_serialized = fmt::format("\n<b>–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:</b> {}", english_level);

			break;
		}
	}

	const auto message = fmt::format("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>–ò–º—è:</b> {}\n<b>–§–∞–º–∏–ª–∏—è:</b> {}\n<b>–ü–æ—á—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ FTF:</b> {}\n<b>–ù—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥:</b> {}{}",
		name, last_name, email, needs_translation_serialized, english_level_serialized);

	self.GetBot().EditMessage(self.GetContext(), message, keyboard, "HTML");

	return false;
}

void RegistrationForm::Register() {
	auto& tx = GetBot().BeginTransaction();

	const auto& name = info_.name;
	const auto& last_name = info_.last_name;
	const auto& email = info_.email;
	const auto& needs_translation = info_.needs_translation;
	const auto& english_level = info_.english_level;

	tx.exec0(fmt::format("INSERT INTO students (telegram_id, name, surname, email, needs_translation, english_level) VALUES ({}, '{}', '{}', '{}', {}, NULLIF('{}', '')) ON CONFLICT DO NOTHING",
		GetContext().user, tx.esc(name), tx.esc(last_name), tx.esc(email),
		needs_translation == NeedsTranslationChoices::YES ? "TRUE" : "FALSE",
		tx.esc(english_level)
	));

	GetBot().Commit();
}

auto RegistrationForm::Confirm::OnCallback(Self self, std::string_view data) -> Value {
	if (data == "d_confirm") {
		self.Register();

		return State::FINISH;
	} else if (data == "d_back") {
		return Value::PopState();
	} else {
		return Value::Unreachable();
	}
}

auto RegistrationForm::Finish::OnEnter(Self self) -> Value {
	tg::utils::KeyboardBuilder keyboard;

	if (!self.called_from_.empty()) {
		keyboard.Row().Callback("‚û°Ô∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", "d_continue");
	}

	keyboard.Row().Callback("üèÅ –ó–∞–∫—Ä—ã—Ç—å", "d_close");

	self.GetBot().EditMessage(self.GetContext(), "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.", keyboard);

	return false;
}

auto RegistrationForm::Finish::OnCallback(Self self, std::string_view data) -> Value {
	if (data == "d_continue" && !self.called_from_.empty()) {
		hanley_bot::commands::CallCommand(self.GetBot(), fmt::format("static_groups_reg_{}", self.called_from_), self.GetContext());
	} else if (data == "d_close") {
		self.GetBot().DeleteMessage(self.GetContext());
	} else {
		return Value::Unreachable();
	}

	return true;
}

} // namespace hanley_bot::dialogs